// Generated by Selenium IDE
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.junit.jupiter.api.TestInstance.Lifecycle;

import static org.junit.Assert.*;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.Dimension;

@TestInstance(Lifecycle.PER_CLASS) //instead of STATIC modifier for methods with @AfterAll and @BeforeAll
public class FiveTriangleTests {
  private WebDriver driver;
  @BeforeAll
  public void setUp() {
	System.setProperty("webdriver.chrome.driver", "C:\\chromedriver.exe");  
    driver = new ChromeDriver();
  }
  @AfterAll
  public void tearDown() {
    driver.quit();
  }
  @Test
  public void equilateralTriangle() {
    driver.get("https://www.calculator.net/triangle-calculator.html");
    driver.manage().window().setSize(new Dimension(1616, 876));
    driver.findElement(By.cssSelector(".clearbtn")).click();
    driver.findElement(By.name("vy")).click();
    driver.findElement(By.name("vy")).sendKeys("0.0000000000000000000000000000000000000000000000000000001");
    driver.findElement(By.name("vx")).click();
    driver.findElement(By.name("vx")).sendKeys("0.0000000000000000000000000000000000000000000000000000001");
    driver.findElement(By.name("vz")).click();
    driver.findElement(By.name("vz")).sendKeys("0.0000000000000000000000000000000000000000000000000000001");
    driver.findElement(By.cssSelector("tr:nth-child(5) input")).click();
    assertEquals(driver.findElement(By.cssSelector("td > h3")).getText(), "Equilateral Triangle");
  }
  @Test
  public void invalidTriangleSide() {
    driver.get("https://www.calculator.net/triangle-calculator.html");
    driver.manage().window().setSize(new Dimension(1616, 876));
    driver.findElement(By.cssSelector(".clearbtn")).click();
    driver.findElement(By.name("vy")).click();
    driver.findElement(By.name("vy")).sendKeys("\"\"");
    driver.findElement(By.name("vx")).click();
    driver.findElement(By.name("vx")).sendKeys("1");
    driver.findElement(By.name("vz")).click();
    driver.findElement(By.name("vz")).sendKeys("1");
    driver.findElement(By.cssSelector("tr:nth-child(5) input")).click();
    assertEquals(driver.findElement(By.cssSelector("font")).getText(), "Please provide 3 positive values, including at least one side.");
  }
  @Test
  public void isoscelesResultScaleneExpectedTriangle() {
    driver.get("https://www.calculator.net/triangle-calculator.html");
    driver.manage().window().setSize(new Dimension(1616, 876));
    driver.findElement(By.cssSelector(".clearbtn")).click();
    driver.findElement(By.name("vx")).click();
    driver.findElement(By.name("vx")).sendKeys("1000001000000000000");
    driver.findElement(By.name("vy")).click();
    driver.findElement(By.name("vy")).sendKeys("1000000000000000000");
    driver.findElement(By.name("vz")).click();
    driver.findElement(By.name("vz")).sendKeys("1999999999999999999");
    driver.findElement(By.cssSelector("tr:nth-child(5) input")).click();
    assertEquals(driver.findElement(By.cssSelector("td > h3")).getText(), "Obtuse Scalene Triangle");
  }
  @Test
  public void rightIsoscelesTriangle() {
    driver.get("https://www.calculator.net/triangle-calculator.html");
    driver.manage().window().setSize(new Dimension(1616, 876));
    driver.findElement(By.cssSelector(".clearbtn")).click();
    driver.findElement(By.name("vy")).click();
    driver.findElement(By.name("vy")).sendKeys("1");
    driver.findElement(By.name("vx")).click();
    driver.findElement(By.name("vx")).sendKeys("1");
    driver.findElement(By.name("vz")).click();
    driver.findElement(By.name("vz")).sendKeys("1.4142135624");
    driver.findElement(By.cssSelector("tr:nth-child(5) input")).click();
    assertEquals(driver.findElement(By.cssSelector("td > h3")).getText(), "Right Isosceles Triangle");
  }
  @Test
  public void tooLargeTriangleSides() {
    driver.get("https://www.calculator.net/triangle-calculator.html");
    driver.manage().window().setSize(new Dimension(1616, 876));
    driver.findElement(By.cssSelector(".clearbtn")).click();
    driver.findElement(By.name("vx")).click();
    driver.findElement(By.name("vx")).sendKeys("10000000000000000000");
    driver.findElement(By.name("vy")).click();
    driver.findElement(By.name("vy")).sendKeys("10000000000000000000");
    driver.findElement(By.name("vz")).click();
    driver.findElement(By.name("vz")).sendKeys("19999999999999999999");
    driver.findElement(By.cssSelector("tr:nth-child(5) input")).click();
    assertEquals(driver.findElement(By.cssSelector("font")).getText(), "The sum of two sides must be larger than the third.");
  }
  @Test
  public void oneMore() {
    driver.get("https://www.calculator.net/triangle-calculator.html");
    driver.findElement(By.xpath("//td/img")).click();
    driver.findElement(By.name("vx")).click();
    driver.findElement(By.cssSelector("tr:nth-child(2) > td:nth-child(1) > .in4char")).sendKeys("3");
    driver.findElement(By.name("vy")).click();
    driver.findElement(By.xpath("//div[@id=\'content\']/table/tbody/tr/td/table/tbody/tr[2]/td[3]/input")).sendKeys("4");
    driver.findElement(By.name("vz")).click();
    driver.findElement(By.xpath("//input[@name=\'vz\']")).sendKeys("5");
    driver.findElement(By.xpath("//tr[5]/td/input")).click();
    assertEquals(driver.findElement(By.cssSelector("td > h3")).getText(), "Right Scalene Triangle");
  }
}
